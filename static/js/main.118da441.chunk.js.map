{"version":3,"sources":["types/Paths.ts","types/SortKey.ts","api/people.ts","components/PersonName/index.ts","components/PersonName/PersonName.tsx","components/PersonRow/index.ts","components/PersonRow/PersonRow.tsx","components/PeopleTable/index.ts","components/PeopleTable/PeopleTable.tsx","components/Loader/Loader.tsx","components/PeoplePage/PeoplePage.tsx","components/PeoplePage/index.ts","components/NotFoundPage/index.ts","components/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["Paths","SortKey","getPeople","a","fetch","response","json","PersonName","name","slug","sex","useSearchParams","searchParams","href","className","classNames","PersonName__male","PersonName__female","PersonRow","person","personSelected","mother","father","born","died","PeopleTable","people","setSearchParams","useState","get","sortBy","setSortBy","sortedPeople","useMemo","sort","b","Name","Sex","localeCompare","Born","Died","MotherName","FatherName","valueA","valueB","sortPeople","changeSortKey","key","set","onClick","map","Loader","filterPeople","query","lowerQuery","toLowerCase","filter","includes","motherName","fatherName","PeoplePage","setPeople","visiblePeople","setVisiblePeople","isLoading","setLoading","setQuery","appliedQuery","setAppliedQuery","useParams","applyQuery","useCallback","debounce","newQuery","useEffect","then","peopleFromServer","find","parent","findParents","filteredPeople","type","placeholder","value","onChange","event","target","NotFoundPage","App","to","Home","People","path","element","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.118da441.chunk.js","sourcesContent":["export enum Paths {\n  Home = 'home',\n  People = 'people',\n}\n","export enum SortKey {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n  MotherName = 'motherName',\n  FatherName = 'fatherName',\n}\n","const API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async (): Promise<Person[]> => {\n  try {\n    const response = await fetch(`${API_URL}`);\n\n    return await response.json();\n  } catch (error) {\n    return [];\n  }\n};\n","import { PersonName } from './PersonName';\n\nexport default PersonName;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './PersonName.scss';\nimport { useSearchParams } from 'react-router-dom';\n\ntype Props = {\n  name: string,\n  slug: string,\n  sex: string,\n};\n\nexport const PersonName: React.FC<Props> = ({ name, slug, sex }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <a\n      href={`#/people/${slug}?${searchParams}`}\n      className={classNames(\n        'PersonName',\n        { PersonName__male: sex === 'm' },\n        { PersonName__female: sex === 'f' },\n      )}\n    >\n      {name}\n    </a>\n  );\n};\n","import { PersonRow } from './PersonRow';\n\nexport default PersonRow;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './PersonRow.scss';\n\nimport PersonName from '../PersonName';\n\ntype Props = {\n  person: Person,\n  personSelected: string,\n};\n\nexport const PersonRow: React.FC<Props> = ({ person, personSelected }) => {\n  const { mother, father } = person;\n\n  return (\n    <tr className={classNames({ 'PersonRow--selected': person.slug === personSelected })}>\n      <td><PersonName name={person.name} slug={person.slug} sex={person.sex} /></td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {mother\n          ? <PersonName name={mother.name} slug={mother.slug} sex={mother.sex} />\n          : <b>name</b>}\n      </td>\n      <td>\n        {father\n          ? <PersonName name={father.name} slug={father.slug} sex={father.sex} />\n          : <b>name</b>}\n      </td>\n    </tr>\n  );\n};\n","import { PeopleTable } from './PeopleTable';\n\nexport default PeopleTable;\n","import React, { useMemo, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { SortKey } from '../../types/SortKey';\n\nimport './PeopleTable.scss';\n\nimport PersonRow from '../PersonRow';\n\ntype Props = {\n  people: Person[],\n  personSelected: string,\n  searchParams: URLSearchParams,\n  setSearchParams: (nextParams: {}) => void,\n};\n\nconst sortPeople = (people: Person[], sortBy: string) => {\n  if (sortBy === '') {\n    return [...people];\n  }\n\n  return [...people].sort((a, b) => {\n    switch (sortBy) {\n      case SortKey.Name:\n      case SortKey.Sex:\n        return a[sortBy].localeCompare(b[sortBy]);\n\n      case SortKey.Born:\n      case SortKey.Died:\n        return a[sortBy] - b[sortBy];\n\n      case SortKey.MotherName:\n      case SortKey.FatherName:\n      {\n        const valueA = a[sortBy];\n        const valueB = b[sortBy];\n\n        if (valueA === null && valueB === null) {\n          return 0;\n        }\n\n        if (valueA === null) {\n          return 1;\n        }\n\n        if (valueB === null) {\n          return -1;\n        }\n\n        return valueA.localeCompare(valueB);\n      }\n\n      default:\n        return 0;\n    }\n  });\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  personSelected,\n  searchParams,\n  setSearchParams,\n}) => {\n  const [sortBy, setSortBy] = useState(searchParams.get('sortBy') || '');\n\n  const sortedPeople = useMemo(\n    () => sortPeople(people, sortBy),\n    [sortBy, people],\n  );\n\n  const changeSortKey = (key: string) => {\n    setSortBy(key);\n    searchParams.set('sortBy', key);\n    setSearchParams(searchParams);\n  };\n\n  return (\n    <table className=\"table is-bordered\">\n      <thead>\n        <tr>\n          <th\n            className={classNames(\n              'PeopleTable__header',\n              { 'PeopleTable__header--sorted': sortBy === SortKey.Name },\n            )}\n            onClick={() => changeSortKey(SortKey.Name)}\n          >\n            Name\n          </th>\n          <th\n            className={classNames(\n              'PeopleTable__header',\n              { 'PeopleTable__header--sorted': sortBy === SortKey.Sex },\n            )}\n            onClick={() => changeSortKey(SortKey.Sex)}\n          >\n            Sex\n          </th>\n          <th\n            className={classNames(\n              'PeopleTable__header',\n              { 'PeopleTable__header--sorted': sortBy === SortKey.Born },\n            )}\n            onClick={() => changeSortKey(SortKey.Born)}\n          >\n            Born\n          </th>\n          <th\n            className={classNames(\n              'PeopleTable__header',\n              { 'PeopleTable__header--sorted': sortBy === SortKey.Died },\n            )}\n            onClick={() => changeSortKey(SortKey.Died)}\n          >\n            Died\n          </th>\n          <th\n            className={classNames(\n              'PeopleTable__header',\n              { 'PeopleTable__header--sorted': sortBy === SortKey.MotherName },\n            )}\n            onClick={() => changeSortKey(SortKey.MotherName)}\n          >\n            Mother&apos;s name\n          </th>\n          <th\n            className={classNames(\n              'PeopleTable__header',\n              { 'PeopleTable__header--sorted': sortBy === SortKey.FatherName },\n            )}\n            onClick={() => changeSortKey(SortKey.FatherName)}\n          >\n            Father&apos;s name\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {sortedPeople.map(person => (\n          <PersonRow person={person} key={person.slug} personSelected={personSelected} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { debounce } from 'lodash';\nimport { getPeople } from '../../api/people';\n\nimport PeopleTable from '../PeopleTable';\nimport { Loader } from '../Loader';\n\nconst DEBOUNCE_DELAY = 500;\n\nconst findParents = (people: Person[]): Person[] => {\n  return people.map(person => ({\n    ...person,\n    mother: people.find(parent => parent.name === person.motherName) || null,\n    father: people.find(parent => parent.name === person.fatherName) || null,\n  }));\n};\n\nconst filterPeople = (people: Person[], query: string) => {\n  const lowerQuery = query.toLowerCase();\n\n  const filtered = people.filter(person => (\n    person.name.toLowerCase().includes(lowerQuery)\n      || person.motherName?.toLowerCase().includes(lowerQuery)\n      || person.fatherName?.toLowerCase().includes(lowerQuery)\n  ));\n\n  return filtered;\n};\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [visiblePeople, setVisiblePeople] = useState<Person[]>([]);\n  const [isLoading, setLoading] = useState(true);\n\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const [query, setQuery] = useState(searchParams.get('query') || '');\n  const [appliedQuery, setAppliedQuery] = useState(query);\n\n  const { personSelected = '' } = useParams<{ personSelected: string }>();\n\n  const applyQuery = useCallback(\n    debounce((newQuery) => {\n      setAppliedQuery(newQuery);\n      searchParams.set('query', newQuery);\n      setSearchParams(searchParams);\n    }, DEBOUNCE_DELAY),\n    [searchParams, personSelected],\n  );\n\n  useEffect(() => {\n    getPeople()\n      .then(peopleFromServer => findParents(peopleFromServer))\n      .then(peopleFromServer => {\n        const filteredPeople = filterPeople(peopleFromServer, appliedQuery);\n\n        setPeople(peopleFromServer);\n        setVisiblePeople(filteredPeople);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    const filteredPeople = filterPeople(people, appliedQuery);\n\n    setVisiblePeople(filteredPeople);\n  }, [appliedQuery]);\n\n  return (\n    <>\n      <h1 className=\"title\">People table</h1>\n\n      <div className=\"container\">\n        {isLoading\n          ? <Loader />\n          : (\n            <>\n              <input\n                type=\"text\"\n                className=\"input\"\n                placeholder=\"Search\"\n                value={query}\n                onChange={(event) => {\n                  setQuery(event.target.value);\n                  applyQuery(event.target.value);\n                }}\n              />\n              <PeopleTable\n                people={visiblePeople}\n                personSelected={personSelected}\n                searchParams={searchParams}\n                setSearchParams={setSearchParams}\n              />\n            </>\n          )}\n      </div>\n    </>\n  );\n};\n","import { PeoplePage } from './PeoplePage';\n\nexport default PeoplePage;\n","import { NotFoundPage } from './NotFoundPage';\n\nexport default NotFoundPage;\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import React from 'react';\nimport {\n  Routes, Route, Link, Navigate,\n} from 'react-router-dom';\n\nimport { Paths } from './types/Paths';\n\nimport './App.scss';\n\nimport PeoplePage from './components/PeoplePage';\nimport NotFoundPage from './components/NotFoundPage';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <header>\n      <nav className=\"navbar\">\n        <Link to={`/${Paths.Home}`} className=\"navbar-item\">Home</Link>\n        <Link to={`/${Paths.People}`} className=\"navbar-item\">People</Link>\n      </nav>\n    </header>\n\n    <Routes>\n      <Route path=\"/\" element={<h1 className=\"title\">Home page</h1>} />\n      <Route path={Paths.Home} element={<Navigate to=\"/\" replace />} />\n      <Route path={`${Paths.People}/:personSelected`} element={<PeoplePage />} />\n      <Route path={Paths.People} element={<PeoplePage />} />\n\n      <Route path=\"*\" element={<NotFoundPage />} />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}